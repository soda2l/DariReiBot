#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "8121877943:AAEPprLrwI627XQd9Al7CQGTLvQtyopRKcE")

class DaryReiBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """üïØ –ú–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Å–≤–µ—á–µ–π DaryRei

‚ú® –£—é—Ç, –∞—Ä–æ–º–∞—Ç –∏ —Ç–µ–ø–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å–≤–µ—á–µ.

–ù–∞–∂–º–∏—Ç–µ –°—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üî•"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="start_shopping")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
        await update.message.reply_text(help_text)
    
    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        await self.show_main_menu(update, context)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")],
            [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="main_channel")],
            [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="open_mini_app")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def show_about_us(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–û –Ω–∞—Å'"""
        about_text = """–ò–Ω–æ–≥–¥–∞ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ - —ç—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –º—ã—Å–ª–∏ –∏ –ø—Ä–æ—Å—Ç–æ —É–ª—ã–±–∞—Ç—å—Å—è. üòä –ó–¥–µ—Å—å —Ç—ã –Ω–µ –Ω–∞–π–¥–µ—à—å –º–µ—Å—Ç–æ –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –ú–æ–∏ —Å–≤–µ—á–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –¥—É—à–µ–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏. ü§ó –ê –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∞—Ö–∏, –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç –∑–∞–±–æ—Ç –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º. üïØÔ∏è

–ë—ã–≤–∞—é—Ç –¥–Ω–∏, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –æ—Ç –∑–∞–±–æ—Ç, –∑–∞–±—Ä–∞—Ç—å—Å—è –ø–æ–¥ –ø–ª–µ–¥ —Å —á–∞—à–∫–æ–π —á–∞—è ‚òï, –∏ –∑–∞–∂–µ—á—å —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. üòå –ò–º–µ–Ω–Ω–æ –¥–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∞ —ç—Ç–∞ –ø–æ–¥–±–æ—Ä–∫–∞.

–¢–µ–±—è –∂–¥—É—Ç –ª–µ–≥–∫–∏–µ, —Ç–µ–ø–ª—ã–µ, –º–µ—Å—Ç–∞–º–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–µ –Ω–æ—Ç–∫–∏ –∞—Ä–æ–º–∞—Ç–∞ —Å–≤–µ—á–µ–π - –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞. üåô‚ú®"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(about_text, reply_markup=reply_markup)
    
    async def show_main_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª"""
        text = "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:"
        keyboard = [
            [InlineKeyboardButton("üì¢ @daryreflexive1999", url="https://t.me/daryreflexive1999")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
        text = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"
        keyboard = [
            [InlineKeyboardButton("üöö –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?", callback_data="faq_delivery")],
            [InlineKeyboardButton("üïØÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏", callback_data="faq_care")],
            [InlineKeyboardButton("ü™î –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–æ—Å–∫?", callback_data="faq_wax")],
            [InlineKeyboardButton("üé® –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç —Å–≤–µ—á–∏?", callback_data="faq_color")],
            [InlineKeyboardButton("‚ú® –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–≤–µ—á—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π?", callback_data="faq_unique")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_delivery(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        text = "–û–±—ã—á–Ω–æ –æ—Ç 2-—Ö –¥–Ω–µ–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è). üì¶"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_care(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç–∫—É –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏"""
        text = """‚ö†Ô∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏:

‚Ä¢ –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–∂–µ—á—å —Å–≤–µ—á—É, –æ–±—Ä–µ–∂—å—Ç–µ —Ñ–∏—Ç–∏–ª—å (0,5‚Äì0,6 —Å–º). ‚úÇÔ∏è
‚Ä¢ –ó–∞–∂–∏–≥–∞–π—Ç–µ —Å–≤–µ—á—É –º–∏–Ω–∏–º—É–º –Ω–∞ —á–∞—Å, —á—Ç–æ–±—ã –≤–æ—Å–∫ —Ä–∞—Å—Ç–∞—è–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ. ‚è∞
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–∂–∏–≥–∞–Ω–∏–µ ‚Äî –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞. ‚è≥
‚Ä¢ –ù–µ –¥–µ—Ä–∂–∏—Ç–µ —Å–≤–µ—á—É –¥–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤. üïê
‚Ä¢ –ì–∞—Å–∏—Ç–µ –∫—Ä—ã—à–∫–æ–π. üõ°Ô∏è
‚Ä¢ –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±–µ–∑ –ø—Ä–∏—Å–º–æ—Ç—Ä–∞. üëÄ
‚Ä¢ –•—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º, —Å—É—Ö–æ–º –º–µ—Å—Ç–µ, –≤–¥–∞–ª–∏ –æ—Ç —Å–æ–ª–Ω—Ü–∞. üå°Ô∏è"""
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_wax(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –≤–æ—Å–∫–µ"""
        text = "–î–∞, –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–µ–≤—ã–π –∏ –∫–æ–∫–æ—Å–æ–≤—ã–π –≤–æ—Å–∫. üå±ü••"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_color(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ —Ü–≤–µ—Ç–µ —Å–≤–µ—á–∏"""
        text = "–î–∞, –¥–æ –¥–≤—É—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤ –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç. üåà"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_unique(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–≤–µ—á–∏"""
        text = "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ö–æ—Ü–≤–µ—Ç—ã, —Ñ—Ä—É–∫—Ç—ã, —Å–ª–∞–¥–æ—Å—Ç–∏, —à–∏–º–º–µ—Ä –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª—ã. üå∏üçì‚ú®"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def open_mini_app(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        text = "–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω..."
        keyboard = [
            [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://soda2l.github.io/daryrei-mini-app/"))],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "start_shopping":
            await self.show_main_menu(update, context)
        elif data == "about_us":
            await self.show_about_us(update, context)
        elif data == "main_channel":
            await self.show_main_channel(update, context)
        elif data == "faq":
            await self.show_faq(update, context)
        elif data == "back_to_main":
            await self.show_main_menu(update, context)
        elif data == "back_to_about":
            await self.show_about_us(update, context)
        elif data == "faq_delivery":
            await self.show_faq_delivery(update, context)
        elif data == "faq_care":
            await self.show_faq_care(update, context)
        elif data == "faq_wax":
            await self.show_faq_wax(update, context)
        elif data == "faq_color":
            await self.show_faq_color(update, context)
        elif data == "faq_unique":
            await self.show_faq_unique(update, context)
        elif data == "open_mini_app":
            await self.open_mini_app(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ DaryRei...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = DaryReiBot()
    bot.run()
